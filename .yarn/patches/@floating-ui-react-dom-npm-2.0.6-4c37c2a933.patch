diff --git a/dist/floating-ui.react-dom.mjs b/dist/floating-ui.react-dom.mjs
index 5acc03db9bf8dc790259330c6bad8082f0d71f52..543b0a1eaedbfe3fe8abd913434ecfd8b5d24a17 100644
--- a/dist/floating-ui.react-dom.mjs
+++ b/dist/floating-ui.react-dom.mjs
@@ -4,6 +4,22 @@ import * as React from 'react';
 import { useLayoutEffect, useEffect } from 'react';
 import * as ReactDOM from 'react-dom';
 
+const makeTransitioned = (og) => {
+  return (...args) => {
+    const [a, b] = og(...args)
+    const w = React.useCallback((...args) => {
+      let res
+      React.startTransition(() => {
+        res = b(...args)
+      })
+      return res
+    }, [b])
+    return [a, w]
+  }
+}
+const useStateAsync = makeTransitioned(React.useState)
+const useReducerAsync = makeTransitioned(React.useReducer)
+
 /**
  * Provides data to position an inner element of the floating element so that it
  * appears centered to the reference element.
@@ -138,7 +154,7 @@ function useFloating(options) {
     whileElementsMounted,
     open
   } = options;
-  const [data, setData] = React.useState({
+  const [data, setData] = useStateAsync({
     x: 0,
     y: 0,
     strategy,
@@ -146,12 +162,12 @@ function useFloating(options) {
     middlewareData: {},
     isPositioned: false
   });
-  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);
+  const [latestMiddleware, setLatestMiddleware] = useStateAsync(middleware);
   if (!deepEqual(latestMiddleware, middleware)) {
     setLatestMiddleware(middleware);
   }
-  const [_reference, _setReference] = React.useState(null);
-  const [_floating, _setFloating] = React.useState(null);
+  const [_reference, _setReference] = useStateAsync(null);
+  const [_floating, _setFloating] = useStateAsync(null);
   const setReference = React.useCallback(node => {
     if (node !== referenceRef.current) {
       referenceRef.current = node;
